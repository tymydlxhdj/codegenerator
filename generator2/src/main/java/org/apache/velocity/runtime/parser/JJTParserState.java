/* Generated By:JavaCC: Do not edit this line. JJTParserState.java Version 4.1 */
package org.apache.velocity.runtime.parser;

import org.apache.velocity.runtime.parser.node.Node;

// TODO: Auto-generated Javadoc
/**
 * The Class JJTParserState.
 *
 * @author mqfdy
 */
public class JJTParserState {
  
  /** The nodes. */
  private java.util.List nodes;
  
  /** The marks. */
  private java.util.List marks;

  /** The sp. */
  private int sp;        // number of nodes on stack
  
  /** The mk. */
  private int mk;        // current mark
  
  /** The node created. */
  private boolean node_created;

  /**
	 * Instantiates a new JJT parser state.
	 */
  public JJTParserState() {
    nodes = new java.util.ArrayList();
    marks = new java.util.ArrayList();
    sp = 0;
    mk = 0;
  }

  /**
	 * Node created.
	 *
	 * @author mqfdy
	 * @return true, if successful
	 * @Date 2018-09-03 09:00
	 */
  /* Determines whether the current node was actually closed and
     pushed.  This should only be called in the final user action of a
     node scope.  */
  public boolean nodeCreated() {
    return node_created;
  }

  /**
	 * Reset.
	 *
	 * @author mqfdy
	 * @Date 2018-09-03 09:00
	 */
  /* Call this to reinitialize the node stack.  It is called
     automatically by the parser's ReInit() method. */
  public void reset() {
    nodes.clear();
    marks.clear();
    sp = 0;
    mk = 0;
  }

  /**
	 * Root node.
	 *
	 * @author mqfdy
	 * @return the node
	 * @Date 2018-09-03 09:00
	 */
  /* Returns the root node of the AST.  It only makes sense to call
     this after a successful parse. */
  public Node rootNode() {
    return (Node)nodes.get(0);
  }

  /**
	 * Push node.
	 *
	 * @author mqfdy
	 * @param n
	 *            the n
	 * @Date 2018-09-03 09:00
	 */
  /* Pushes a node on to the stack. */
  public void pushNode(Node n) {
    nodes.add(n);
    ++sp;
  }

  /**
	 * Pop node.
	 *
	 * @author mqfdy
	 * @return the node
	 * @Date 2018-09-03 09:00
	 */
  /* Returns the node on the top of the stack, and remove it from the
     stack.  */
  public Node popNode() {
    if (--sp < mk) {
      mk = ((Integer)marks.remove(marks.size()-1)).intValue();
    }
    return (Node)nodes.remove(nodes.size()-1);
  }

  /**
	 * Peek node.
	 *
	 * @author mqfdy
	 * @return the node
	 * @Date 2018-09-03 09:00
	 */
  /* Returns the node currently on the top of the stack. */
  public Node peekNode() {
    return (Node)nodes.get(nodes.size()-1);
  }

  /**
	 * Node arity.
	 *
	 * @author mqfdy
	 * @return the int
	 * @Date 2018-09-03 09:00
	 */
  /* Returns the number of children on the stack in the current node
     scope. */
  public int nodeArity() {
    return sp - mk;
  }


  /**
	 * Clear node scope.
	 *
	 * @author mqfdy
	 * @param n
	 *            the n
	 * @Date 2018-09-03 09:00
	 */
  public void clearNodeScope(Node n) {
    while (sp > mk) {
      popNode();
    }
    mk = ((Integer)marks.remove(marks.size()-1)).intValue();
  }


  /**
	 * Open node scope.
	 *
	 * @author mqfdy
	 * @param n
	 *            the n
	 * @Date 2018-09-03 09:00
	 */
  public void openNodeScope(Node n) {
    marks.add(new Integer(mk));
    mk = sp;
    n.jjtOpen();
  }


  /**
	 * Close node scope.
	 *
	 * @author mqfdy
	 * @param n
	 *            the n
	 * @param num
	 *            the num
	 * @Date 2018-09-03 09:00
	 */
  /* A definite node is constructed from a specified number of
     children.  That number of nodes are popped from the stack and
     made the children of the definite node.  Then the definite node
     is pushed on to the stack. */
  public void closeNodeScope(Node n, int num) {
    mk = ((Integer)marks.remove(marks.size()-1)).intValue();
    while (num-- > 0) {
      Node c = popNode();
      c.jjtSetParent(n);
      n.jjtAddChild(c, num);
    }
    n.jjtClose();
    pushNode(n);
    node_created = true;
  }


  /**
	 * Close node scope.
	 *
	 * @author mqfdy
	 * @param n
	 *            the n
	 * @param condition
	 *            the condition
	 * @Date 2018-09-03 09:00
	 */
  /* A conditional node is constructed if its condition is true.  All
     the nodes that have been pushed since the node was opened are
     made children of the conditional node, which is then pushed
     on to the stack.  If the condition is false the node is not
     constructed and they are left on the stack. */
  public void closeNodeScope(Node n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = ((Integer)marks.remove(marks.size()-1)).intValue();
      while (a-- > 0) {
        Node c = popNode();
        c.jjtSetParent(n);
        n.jjtAddChild(c, a);
      }
      n.jjtClose();
      pushNode(n);
      node_created = true;
    } else {
      mk = ((Integer)marks.remove(marks.size()-1)).intValue();
      node_created = false;
    }
  }
}
/* JavaCC - OriginalChecksum=8480fe4a1d30863ae6ba57f195d12191 (do not edit this line) */
